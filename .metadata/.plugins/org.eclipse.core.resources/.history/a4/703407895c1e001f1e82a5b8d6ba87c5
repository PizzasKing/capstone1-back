package com.manbo.homepage.service;

import lombok.RequiredArgsConstructor;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.multipart.MultipartFile;

import com.manbo.homepage.dto.TrailDTO;
import com.manbo.homepage.entity.Trail;
import com.manbo.homepage.exception.FinalException;
import com.manbo.homepage.repository.TrailRepository;

import java.io.File;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RequiredArgsConstructor
@Service
public class TrailService {
	private final TrailRepository trailRepository;

    //산책로 등록
    public void save(TrailDTO trailDTO, MultipartFile trailRoute) throws Exception {
        if(!trailRoute.isEmpty()){
            UUID uuid = UUID.randomUUID();
            String bfilename = uuid + "_" + trailRoute.getOriginalFilename(); //원본파일
            String bfilepath = "C:/projectfiles/" + bfilename;

            File savedFile = new File(bfilepath);
            trailRoute.transferTo(savedFile);

            
        }
        Trail trail = Trail.toSaveEntity(trailDTO);
        trailRepository.save(trail);
    }
    
    //산책로 리스트
    public List<TrailDTO> findAll() {
        List<Trail> trailList = trailRepository.findAll();
        List<TrailDTO> trailDTOList = new ArrayList<>();

        for(Trail trail : trailList){
            TrailDTO trailDTO = TrailDTO.toSaveDTO(trail);
            trailDTOList.add(trailDTO);
        }
        return trailDTOList;
    }
    //상세보기
    public TrailDTO findById(Long bookId) {
        Optional<Trail> findBook = trailRepository.findById(bookId);
        if(findBook.isPresent()){
            TrailDTO bookDTO = TrailDTO.toSaveDTO(findBook.get());
            return bookDTO;
        }else{
            throw new FinalException("페이지를 찾을 수 없습니다.");
        }
    }
    
    //책 삭제
    public void deleteById(Long bookId) {
        trailRepository.deleteById(bookId);
    }
    
    //검색
    public Page<TrailDTO> search(String keyword, Pageable pageable) {
        Page<Trail> searchResults = trailRepository.findByBnameContainingIgnoreCaseOrAuthorContainingIgnoreCase(keyword, pageable);
        
        // Page<Book>를 Page<BookDTO>로 변환
        return searchResults.map(TrailDTO::toSaveDTO);
    }


	public Page<TrailDTO> paging(Pageable pageable) {
		Page<Trail> bookPage = trailRepository.findAll(pageable);
		return bookPage.map(book -> TrailDTO.toSaveDTO(book));
	}

}
