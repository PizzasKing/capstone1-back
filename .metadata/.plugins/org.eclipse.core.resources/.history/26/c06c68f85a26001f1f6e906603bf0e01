package com.manbo.homepage.service;

import com.manbo.homepage.dto.RecommendBoardDTO;
import com.manbo.homepage.entity.RecommendBoard;
import com.manbo.homepage.repository.RecommendBoardRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class RecommendBoardService {

    private final RecommendBoardRepository recommendBoardRepository;

    public List<RecommendBoardDTO> getAllRecommendBoards() {
        List<RecommendBoard> recommendBoards = recommendBoardRepository.findAll();
        return recommendBoards.stream()
                .map(RecommendBoardDTO::toSaveDTO)
                .collect(Collectors.toList());
    }

    public RecommendBoardDTO getRecommendBoardById(Long rbid) {
        RecommendBoard recommendBoard = recommendBoardRepository.findById(rbid)
                .orElseThrow(() -> new ResourceNotFoundException("RecommendBoard", "rbid", rbid));
        return RecommendBoardDTO.toSaveDTO(recommendBoard);
    }

    public RecommendBoardDTO createRecommendBoard(RecommendBoardDTO recommendBoardDTO) {
        RecommendBoard recommendBoard = RecommendBoard.toSaveEntity(recommendBoardDTO);
        RecommendBoard savedRecommendBoard = recommendBoardRepository.save(recommendBoard);
        return RecommendBoardDTO.toSaveDTO(savedRecommendBoard);
    }

    public RecommendBoardDTO updateRecommendBoard(Long rbid, RecommendBoardDTO recommendBoardDTO) {
        RecommendBoard existingRecommendBoard = recommendBoardRepository.findById(rbid)
                .orElseThrow(() -> new ResourceNotFoundException("RecommendBoard", "rbid", rbid));

        existingRecommendBoard.setRbtitle(recommendBoardDTO.getRbtitle());
        existingRecommendBoard.setRbcontent(recommendBoardDTO.getRbcontent());
        existingRecommendBoard.setRecommendFilename(recommendBoardDTO.getRecommendFilename());
        existingRecommendBoard.setRecommendFilepath(recommendBoardDTO.getRecommendFilepath());

        RecommendBoard updatedRecommendBoard = recommendBoardRepository.save(existingRecommendBoard);
        return RecommendBoardDTO.toSaveDTO(updatedRecommendBoard);
    }

    public void deleteRecommendBoard(Long rbid) {
        RecommendBoard recommendBoard = recommendBoardRepository.findById(rbid)
                .orElseThrow(() -> new ResourceNotFoundException("RecommendBoard", "rbid", rbid));
        recommendBoardRepository.delete(recommendBoard);
    }
}

